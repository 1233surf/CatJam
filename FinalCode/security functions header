#ifndef SECURITY_FUNCTIONS_H
#define SECURITY_FUNCTIONS_H
#include <iostream>
using namespace std;

#include <string>
#include <regex>

/*class AccessKey{

};*/

class Authenticator {
public:
	// Constructor
	Authenticator();

	// Destructor
	~Authenticator();

	// Method to check if the provided password is correct
	bool authenticateUser(const std::string& enteredPassword);

private:
	// Replace this with a secure storage mechanism for the actual password
	const std::string actualPassword = "your_actual_password";
};

class CheckCreds {
	//checks credntials from sql user database or employee database

};

class CheckLogs {
	//allows the manager to compare logs
};

class DisplayWarning {
	//if log in is wrong
	  //if username or password is wrong

	  //if account doesnt exist 

	//if server is not connected 

};

class Encryptor {
public:
	// Constructor with the encryption key
	Encryptor(int shift);

	// Destructor
	~Encryptor();

	// Function to encrypt a string
	std::string encrypt(const std::string& input);

private:
	int shift; // Shift value for the Caesar cipher

	// Helper function to shift a single character
	char shiftChar(char c, int shift);
};

namespace InputSanitizer {

	// Function to sanitize HTML input
	std::string sanitizeHTML(const std::string& input) {
		// Regular expression to remove HTML tags
		std::regex htmlTags("<.*?>");
		std::string sanitized = std::regex_replace(input, htmlTags, "");

		// You can add more sanitization steps as needed, such as handling special characters

		return sanitized;
	}
}
/*class SanatizeInput {

	//idk how to do this

};*/

#endif
